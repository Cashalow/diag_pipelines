rule annotate_with_prokka:
    conda:
        pipeline_path + "envs/prokka.yml"
    singularity:
        "docker://quay.io/biocontainers/prokka:1.14.0--pl526_0"
    input:
        contigs = "samples/{sample}/assembly/spades/coverage_filtered/bwa/contigs_500bp_high_coverage.fasta"
    output:
        "samples/{sample}/annotation/{sample}.gff",
        "samples/{sample}/annotation/{sample}.faa",
        "samples/{sample}/annotation/{sample}.fsa",
        "samples/{sample}/annotation/{sample}.txt",
        "samples/{sample}/annotation/{sample}.gbk",
        "samples/{sample}/annotation/{sample}.ffn",
        "samples/{sample}/annotation/{sample}.fna",
    log:
        "samples/{sample}/annotation/spades/{sample}.txt",
    params:
        genus = lambda wildcards: all_samples.loc[wildcards.sample, "ScientificName"].split("_")[0],
        spec = lambda wildcards: all_samples.loc[wildcards.sample, "ScientificName"].split("_")[1]
    shell:
        """
        export LC_ALL=C
        prokka --quiet --outdir $( dirname {output[0]}) --force {input[contigs]} --prefix {wildcards.sample} --strain {wildcards.sample} --genus '{params.genus}' --species '{params.spec}' --locustag 'prokka'
        unset LC_ALL
        """

rule annotate_with_prokka_unfiltered_assembly:
    conda:
        pipeline_path + "envs/prokka.yml"
    singularity:
        "docker://quay.io/biocontainers/prokka:1.14.0--pl526_0"
    input:
        contigs = "samples/{sample}/assembly/spades_no_correction/contigs.fasta"
    output:
        "samples/{sample}/annotation/spades_no_correction/{sample}.fsa"
    params:
        genus = lambda wildcards: all_samples.loc[wildcards.sample, "ScientificName"].split("_")[0],
        spec = lambda wildcards: all_samples.loc[wildcards.sample, "ScientificName"].split("_")[1],
    shell:
        """
        export LC_ALL=C
        prokka --quiet --outdir $( dirname {output[0]}) --force {input[contigs]} --prefix {wildcards.sample} --strain {wildcards.sample} --genus '{params.genus}' --species '{params.spec}' --locustag 'prokka'
        unset LC_ALL
        """


rule create_blast_database_from_protein_sequences:
    conda:
        pipeline_path + "envs/blast.yml"
    singularity:
        "docker://quay.io/biocontainers/blast:2.9.0--pl526h3066fca_4"
    input:
        proteins = "samples/{sample}/annotation/{sample}.faa",
    output:
        "samples/{sample}/annotation/{sample}.faa.phr",
    shell:
        """
        makeblastdb -dbtype prot -in {input[proteins]}
        """

rule create_blast_database_from_contig_sequences:
    conda:
        pipeline_path + "envs/blast.yml"
    singularity:
        "docker://quay.io/biocontainers/blast:2.9.0--pl526h3066fca_4"
    input:
        contigs = "samples/{sample}/annotation/{sample}.fsa",
    output:
        "samples/{sample}/annotation/{sample}.fsa.nhr",
    shell:
        """
        makeblastdb -dbtype nucl -in {input[contigs]}
        """

rule remove_fasta_part_from_gff:
    conda:
        pipeline_path + "envs/python-r.yml"
    singularity:
        "docker://metagenlab/diag-pipeline-python-r:1.1"
    input:
        "samples/{sample}/annotation/{sample}.gff"
    output:
        "samples/{sample}/annotation/{sample}_truncated.gff"
    shell:
        "sed '/^##FASTA$/,$d' {input} > {output}"

rule get_CDS_and_contigs_depth:
    conda:
        pipeline_path + "envs/biopython.yml"
    singularity:
        "docker://metagenlab/diag-pipeline-report:1.2"
    input:
        "samples/{sample}/assembly/spades/contigs_500bp_renamed.fasta",
        "samples/{sample}/annotation/{sample}.gbk",
        "samples/{sample}/quality/mapping/{mapping_method}/{ref}/mapping.depth",
    output:
        "samples/{sample}/quality/mapping/{mapping_method}/{ref}/CDS_depth.tab",
        "samples/{sample}/quality/mapping/{mapping_method}/{ref}/contig_gc_depth_500bp_high_coverage.tab"
    script:
        "scripts/calculate_CDS_depth.py"


rule copy_filtered_assembly_to_reference_folder:
    input:
        contigs = "samples/{sample}/annotation/{sample}.fna",
        gbk = "samples/{sample}/annotation/{sample}.gbk",
    output:
        fasta_ref = "references/{sample}_assembled_genome/genome_filtered.fna",
        gbk_ref = "references/{sample}_assembled_genome/genome_filtered.gbk",
    shell:
        """
        cp {input[0]} {output[fasta_ref]}
        cp {input[1]} {output[gbk_ref]}
        """
