
rule rgi2rst:
    singularity:
        singularity_envs["python_r"]   
    input:
        rgi_files=expand("samples/{sample}/resistance/rgi.tsv", sample=read_naming.keys()),
        mlst_file="report/typing/mlst/summary.tsv",
        mash_files=expand("samples/{sample}/contamination/mash/assembly/distances_formated_no_virus.tsv", sample=read_naming.keys()),
    output:
        "report/resistance/rgi_report.rst",
    log:
        logging_folder + "report/resistance/rgi_report.log"
    script: "scripts/card_mlst_rst_report.py"



rule rst2docx:
    singularity:
        singularity_envs["pandoc"]   
    input:
        "report/resistance/rgi_report.rst",
    output:
        "report/resistance/rgi_report.docx",
    params:
        reference_docx = config["reference_docx"]
    log:
        logging_folder + "report/resistance/rgi_report_docx.log"
    shell: 
        """
        pandoc --reference-doc={params[0]} {input[0]} -o {output[0]} --wrap=preserve
        """

rule tsv2xlsx:
    singularity:
        singularity_envs["python_r"]   
    input:
        "report/resistance/rgi_detail_format.tsv",
    output:
        "report/resistance/rgi_detail_format.xlsx",
    script:"scripts/tsv2xlsx.py"


rule rgi2format_table:
    singularity:
        singularity_envs["python_r"]   
    input:
        rgi_files=expand("samples/{sample}/resistance/rgi.tsv", sample=read_naming.keys()),
    output:
        "report/resistance/rgi_detail_format.tsv",
    log:
        logging_folder + "report/resistance/rgi_report_tsv.log"
    script: "scripts/card_mlst_rst_format_detail_table.py"